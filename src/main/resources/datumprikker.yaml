openapi: 3.0.1
info:
  title: Datumprikker API
  description: API for scheduling Datumprikker polls.
  version: "1.0.0"
servers:
  - url: http://localhost:8080
    description: Local development server
paths:
  /polls:
    post:
      summary: Create a new poll
      operationId: createPolls
      tags:
        - Polls
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PollCreateRequest'
      responses:
        '201':
          description: Poll created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pollId:
                    type: string
                    format: uuid
        '400':
          description: Invalid request payload.
    get:
      summary: Retrieve a list of all polls
      operationId: listPolls
      tags:
        - Polls
      responses:
        '200':
          description: A list of polls.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PollList'
  /polls/{pollId}:
    get:
      summary: Get poll details including options that are still open.
      operationId: getPoll
      tags:
        - Polls
      parameters:
        - name: pollId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Poll details returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Poll'
        '404':
          description: Poll not found.
  /polls/{pollId}/book:
    post:
      summary: Book a poll option
      operationId: bookPollOption
      tags:
        - Polls
      parameters:
        - name: pollId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PollBookRequest'
      responses:
        '201':
          description: Booking recorded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  bookingId:
                    type: string
                    format: uuid
        '400':
          description: Invalid booking request.
        '409':
          description: Conflict with existing booking.
  /polls/{pollId}/results:
    get:
      summary: Retrieve poll results
      operationId: resultPolls
      tags:
        - Polls
      parameters:
        - name: pollId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Poll results returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PollResults'
        '404':
          description: Poll not found.
components:
  schemas:
    Poll:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        createdBy:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/PollOption'
    PollList:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        createdBy:
          type: string
        description:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/PollOptionList'
    PollOptionList:
      type: object
      properties:
        optionId:
          type: string
          format: uuid
        beginDateTime:
          type: string
          format: date-time
        endDateTime:
          type: string
          format: date-time
    PollOption:
      type: object
      required:
        - beginDateTime
        - endDateTime
      properties:
        beginDateTime:
          type: string
          format: date-time
        endDateTime:
          type: string
          format: date-time
    PollCreateRequest:
      type: object
      required:
        - title
        - createdBy
        - options
      properties:
        title:
          type: string
        description:
          type: string
        createdBy:
          type: string
        options:
          type: array
          description: List of proposed date-times.
          items:
            $ref: '#/components/schemas/PollOption'
    PollBookRequest:
      type: object
      required:
        - optionId
        - name
        - email
      properties:
        optionId:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
    PollResults:
      type: object
      properties:
        pollId:
          type: string
          format: uuid
        results:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              beginDateTime:
                type: string
                format: date-time
              endDateTime:
                type: string
                format: date-time
